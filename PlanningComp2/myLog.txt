
Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.228 secs.
Sorting reachable states list...

Time for model construction: 0.245 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.081069 s
Synthesis took 0.238832 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.003603 s
Synthesis took 0.017648 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.003163 s
Synthesis took 0.016038 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.5740000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.08600000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.08600000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.003083 s
Synthesis took 0.018773 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002816 s
Synthesis took 0.018298 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.029780 s
Synthesis took 0.065994 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.111 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.125 secs.
Sorting reachable states list...

Time for model construction: 0.126 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.002823 s
Synthesis took 0.018017 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.002608 s
Synthesis took 0.016238 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.002261 s
Synthesis took 0.011934 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.067 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.08800000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.08800000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002849 s
Synthesis took 0.022785 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002617 s
Synthesis took 0.020320 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.003290 s
Synthesis took 0.076771 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.128 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.112 secs.
Sorting reachable states list...

Time for model construction: 0.113 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.002472 s
Synthesis took 0.025663 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.006027 s
Synthesis took 0.040250 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.010451 s
Synthesis took 0.025220 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.126 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.114 secs.
Sorting reachable states list...

Time for model construction: 0.114 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.003567 s
Synthesis took 0.022292 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.004208 s
Synthesis took 0.106889 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.171185 s
Synthesis took 0.276172 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.41600000000000004 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.42600000000000005 secs.
Sorting reachable states list...

Time for model construction: 0.42700000000000005 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.002035 s
Synthesis took 0.057868 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001754 s
Synthesis took 0.009902 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.028796 s
Synthesis took 0.037292 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.11 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.059000000000000004 secs.
Sorting reachable states list...

Time for model construction: 0.059000000000000004 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.009757 s
Synthesis took 0.022887 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002417 s
Synthesis took 0.014712 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001841 s
Synthesis took 0.025491 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.08700000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.058 secs.
Sorting reachable states list...

Time for model construction: 0.058 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001987 s
Synthesis took 0.142560 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.003244 s
Synthesis took 0.015467 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001764 s
Synthesis took 0.023730 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.18600000000000003 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.096 secs.
Sorting reachable states list...

Time for model construction: 0.096 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002479 s
Synthesis took 0.016304 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001875 s
Synthesis took 0.015378 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001866 s
Synthesis took 0.024594 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.083 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.066 secs.
Sorting reachable states list...

Time for model construction: 0.066 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001909 s
Synthesis took 0.055308 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002026 s
Synthesis took 0.015861 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002130 s
Synthesis took 0.025203 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.1 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.085 secs.
Sorting reachable states list...

Time for model construction: 0.085 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001764 s
Synthesis took 0.052744 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002089 s
Synthesis took 0.015539 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002477 s
Synthesis took 0.025633 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.098 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.129 secs.
Sorting reachable states list...

Time for model construction: 0.129 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001920 s
Synthesis took 0.015044 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001558 s
Synthesis took 0.013546 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001952 s
Synthesis took 0.024274 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.08800000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.12000000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.12000000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.003375 s
Synthesis took 0.072290 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001851 s
Synthesis took 0.019949 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001708 s
Synthesis took 0.024582 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.12200000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.033 secs.
Sorting reachable states list...

Time for model construction: 0.033 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001803 s
Synthesis took 0.021610 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001801 s
Synthesis took 0.014593 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001813 s
Synthesis took 0.025773 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.065 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.043000000000000003 secs.
Sorting reachable states list...

Time for model construction: 0.044000000000000004 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001902 s
Synthesis took 0.038300 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.004083 s
Synthesis took 0.030619 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.002985 s
Synthesis took 0.010709 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.11 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.034 secs.
Sorting reachable states list...

Time for model construction: 0.034 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002059 s
Synthesis took 0.053832 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002597 s
Synthesis took 0.036231 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002140 s
Synthesis took 0.030094 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.12400000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.101 secs.
Sorting reachable states list...

Time for model construction: 0.101 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001903 s
Synthesis took 0.018049 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001842 s
Synthesis took 0.016033 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001844 s
Synthesis took 0.145725 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.18400000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.056 secs.
Sorting reachable states list...

Time for model construction: 0.056 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002122 s
Synthesis took 0.103167 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002227 s
Synthesis took 0.061373 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002527 s
Synthesis took 0.060328 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.23500000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.064 secs.
Sorting reachable states list...

Time for model construction: 0.067 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002784 s
Synthesis took 0.041711 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002101 s
Synthesis took 0.043616 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001599 s
Synthesis took 0.026091 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.115 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.07400000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.07400000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001794 s
Synthesis took 0.046153 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001527 s
Synthesis took 0.014815 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001708 s
Synthesis took 0.025149 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.09000000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.07800000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.11 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001594 s
Synthesis took 0.032219 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001545 s
Synthesis took 0.013802 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001838 s
Synthesis took 0.171952 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.221 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.082 secs.
Sorting reachable states list...

Time for model construction: 0.082 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001633 s
Synthesis took 0.044331 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001324 s
Synthesis took 0.012926 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001582 s
Synthesis took 0.074942 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.135 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.08800000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.08800000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001575 s
Synthesis took 0.031636 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001528 s
Synthesis took 0.013317 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001686 s
Synthesis took 0.023845 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.07200000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.052000000000000005 secs.
Sorting reachable states list...

Time for model construction: 0.052000000000000005 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001721 s
Synthesis took 0.013811 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001304 s
Synthesis took 0.013369 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001364 s
Synthesis took 0.023777 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.055 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.049 secs.
Sorting reachable states list...

Time for model construction: 0.049 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001779 s
Synthesis took 0.010800 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001074 s
Synthesis took 0.008920 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.000946 s
Synthesis took 0.008348 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.031000000000000003 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.055 secs.
Sorting reachable states list...

Time for model construction: 0.08900000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001651 s
Synthesis took 0.015559 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001275 s
Synthesis took 0.014131 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001414 s
Synthesis took 0.037616 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.07100000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.035 secs.
Sorting reachable states list...

Time for model construction: 0.035 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001772 s
Synthesis took 0.054567 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001813 s
Synthesis took 0.019517 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001714 s
Synthesis took 0.040681 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.12100000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.045000000000000005 secs.
Sorting reachable states list...

Time for model construction: 0.045000000000000005 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002000 s
Synthesis took 0.016819 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001257 s
Synthesis took 0.014149 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001546 s
Synthesis took 0.027132 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.061000000000000006 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.028 secs.
Sorting reachable states list...

Time for model construction: 0.028 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001698 s
Synthesis took 0.010273 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001363 s
Synthesis took 0.086825 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.000965 s
Synthesis took 0.007850 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.10800000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.07700000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.07800000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001212 s
Synthesis took 0.011399 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.000973 s
Synthesis took 0.008067 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001251 s
Synthesis took 0.008797 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.030000000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.07 secs.
Sorting reachable states list...

Time for model construction: 0.07 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001319 s
Synthesis took 0.009391 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001262 s
Synthesis took 0.013236 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001063 s
Synthesis took 0.008640 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.034 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.058 secs.
Sorting reachable states list...

Time for model construction: 0.059000000000000004 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001029 s
Synthesis took 0.008810 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001241 s
Synthesis took 0.008759 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001988 s
Synthesis took 0.009004 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.029 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.023000000000000003 secs.
Sorting reachable states list...

Time for model construction: 0.023000000000000003 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.003699 s
Synthesis took 0.017654 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001600 s
Synthesis took 0.012907 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001310 s
Synthesis took 0.023099 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.057 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.029 secs.
Sorting reachable states list...

Time for model construction: 0.030000000000000002 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001171 s
Synthesis took 0.011949 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001663 s
Synthesis took 0.010000 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001739 s
Synthesis took 0.010475 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.037000000000000005 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.032 secs.
Sorting reachable states list...

Time for model construction: 0.033 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001212 s
Synthesis took 0.025190 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.003637 s
Synthesis took 0.035056 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.002364 s
Synthesis took 0.011499 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.07500000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.046000000000000006 secs.
Sorting reachable states list...

Time for model construction: 0.047 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001478 s
Synthesis took 0.010360 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001804 s
Synthesis took 0.011106 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001238 s
Synthesis took 0.010965 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.035 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.08 secs.
Sorting reachable states list...

Time for model construction: 0.08 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001494 s
Synthesis took 0.016732 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001380 s
Synthesis took 0.013650 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001635 s
Synthesis took 0.026622 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.059000000000000004 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.07 secs.
Sorting reachable states list...

Time for model construction: 0.07 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001340 s
Synthesis took 0.014304 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001783 s
Synthesis took 0.059782 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001566 s
Synthesis took 0.044737 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.131 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.07700000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.07700000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001551 s
Synthesis took 0.013998 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001588 s
Synthesis took 0.014554 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001734 s
Synthesis took 0.027789 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.059000000000000004 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.082 secs.
Sorting reachable states list...

Time for model construction: 0.085 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.002322 s
Synthesis took 0.011673 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001200 s
Synthesis took 0.010301 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001657 s
Synthesis took 0.010404 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.03900000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.038000000000000006 secs.
Sorting reachable states list...

Time for model construction: 0.038000000000000006 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001317 s
Synthesis took 0.041586 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001597 s
Synthesis took 0.017750 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001268 s
Synthesis took 0.011241 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.07600000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.12200000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.12200000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002895 s
Synthesis took 0.111380 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001671 s
Synthesis took 0.030164 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002225 s
Synthesis took 0.088155 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.24100000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.132 secs.
Sorting reachable states list...

Time for model construction: 0.132 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001261 s
Synthesis took 0.010878 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001219 s
Synthesis took 0.011096 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.018412 s
Synthesis took 0.028226 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.053000000000000005 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.038000000000000006 secs.
Sorting reachable states list...

Time for model construction: 0.038000000000000006 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001357 s
Synthesis took 0.011500 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001429 s
Synthesis took 0.033816 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001238 s
Synthesis took 0.010979 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.060000000000000005 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.032 secs.
Sorting reachable states list...

Time for model construction: 0.033 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001884 s
Synthesis took 0.021099 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001276 s
Synthesis took 0.010408 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001524 s
Synthesis took 0.010807 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.045000000000000005 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 10 states
Reachable states exploration and model construction done in 0.043000000000000003 secs.
Sorting reachable states list...

Time for model construction: 0.043000000000000003 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001485 s
Synthesis took 0.011744 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001236 s
Synthesis took 0.011276 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 3
operation: Strategy generation
Strategy construction took 0.001564 s
Synthesis took 0.012238 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
10
// Initial state
InitState:
3
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
3 0 {0=1.0}
4 0 {0=1.0}
7 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
3 0 0 {0=1.0}
4 0 0 {0=1.0}
7 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
3 0 0 0 {0=1.0}
4 0 0 7 {0=1.0}
7 0 0 7 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 10 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.03900000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.03900000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.03900000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001657 s
Synthesis took 0.016953 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001673 s
Synthesis took 0.028122 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001633 s
Synthesis took 0.090208 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.139 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.032 secs.
Sorting reachable states list...

Time for model construction: 0.032 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.002384 s
Synthesis took 0.046747 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001784 s
Synthesis took 0.020840 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001469 s
Synthesis took 0.189279 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.26 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 16 states
Reachable states exploration and model construction done in 0.046000000000000006 secs.
Sorting reachable states list...

Time for model construction: 0.047 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001265 s
Synthesis took 0.013560 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001523 s
Synthesis took 0.013168 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"time"}<=MAXRT [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"time"}<=MAXRT [ S ]]]

initial state: 5
operation: Strategy generation
Strategy construction took 0.001114 s
Synthesis took 0.021322 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
16
// Initial state
InitState:
5
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
5 0 {0=1.0}
6 0 {0=1.0}
11 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
5 0 0 {0=1.0}
6 0 0 {0=1.0}
11 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
5 0 0 0 {0=1.0}
6 0 0 11 {0=1.0}
11 0 0 11 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<am>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]&R{"time"}<=MAXRT [ S ]: 14

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.051000000000000004 seconds.

Result: true (property satisfied in the initial state)
