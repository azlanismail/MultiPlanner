
Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.292 secs.
Sorting reachable states list...

Time for model construction: 0.295 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.049938 s
Synthesis took 0.109197 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.004687 s
Synthesis took 0.027923 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.21800000000000003 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.085 secs.
Sorting reachable states list...

Time for model construction: 0.085 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003377 s
Synthesis took 0.057290 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002891 s
Synthesis took 0.046636 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.112 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.08 secs.
Sorting reachable states list...

Time for model construction: 0.08 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003482 s
Synthesis took 0.023555 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003265 s
Synthesis took 0.023524 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.08600000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.131 secs.
Sorting reachable states list...

Time for model construction: 0.131 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003262 s
Synthesis took 0.020731 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.046356 s
Synthesis took 0.121078 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.14700000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.098 secs.
Sorting reachable states list...

Time for model construction: 0.099 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.004782 s
Synthesis took 0.053404 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002813 s
Synthesis took 0.086221 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.14700000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.133 secs.
Sorting reachable states list...

Time for model construction: 0.133 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.024374 s
Synthesis took 0.087427 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003019 s
Synthesis took 0.020321 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.112 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.12200000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.12200000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.014501 s
Synthesis took 0.071002 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003071 s
Synthesis took 0.076531 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.157 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.064 secs.
Sorting reachable states list...

Time for model construction: 0.064 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002439 s
Synthesis took 0.013756 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002018 s
Synthesis took 0.011649 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.08800000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.08 secs.
Sorting reachable states list...

Time for model construction: 0.08 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002679 s
Synthesis took 0.044032 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002453 s
Synthesis took 0.042961 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.14400000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.17300000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.17300000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002375 s
Synthesis took 0.017744 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003030 s
Synthesis took 0.020989 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.042 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.061000000000000006 secs.
Sorting reachable states list...

Time for model construction: 0.062000000000000006 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002228 s
Synthesis took 0.017529 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001982 s
Synthesis took 0.016071 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.036000000000000004 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.115 secs.
Sorting reachable states list...

Time for model construction: 0.115 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001902 s
Synthesis took 0.012837 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001820 s
Synthesis took 0.010528 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.026000000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.07 secs.
Sorting reachable states list...

Time for model construction: 0.07100000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002356 s
Synthesis took 0.024032 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002319 s
Synthesis took 0.059233 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.08600000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.098 secs.
Sorting reachable states list...

Time for model construction: 0.099 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002427 s
Synthesis took 0.017111 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002335 s
Synthesis took 0.016193 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.038000000000000006 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.062000000000000006 secs.
Sorting reachable states list...

Time for model construction: 0.062000000000000006 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001859 s
Synthesis took 0.011041 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002137 s
Synthesis took 0.012054 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.025 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.08 secs.
Sorting reachable states list...

Time for model construction: 0.081 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003040 s
Synthesis took 0.016173 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002144 s
Synthesis took 0.023360 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.044000000000000004 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.033 secs.
Sorting reachable states list...

Time for model construction: 0.034 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001977 s
Synthesis took 0.011618 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001692 s
Synthesis took 0.010267 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.025 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.054000000000000006 secs.
Sorting reachable states list...

Time for model construction: 0.07500000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001963 s
Synthesis took 0.011037 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002408 s
Synthesis took 0.011592 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.025 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.05 secs.
Sorting reachable states list...

Time for model construction: 0.05 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002870 s
Synthesis took 0.017501 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001507 s
Synthesis took 0.010027 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.030000000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.028 secs.
Sorting reachable states list...

Time for model construction: 0.028 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001760 s
Synthesis took 0.042861 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001913 s
Synthesis took 0.011876 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.057 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.036000000000000004 secs.
Sorting reachable states list...

Time for model construction: 0.036000000000000004 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001977 s
Synthesis took 0.023276 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001789 s
Synthesis took 0.011101 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.037000000000000005 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.061000000000000006 secs.
Sorting reachable states list...

Time for model construction: 0.066 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002293 s
Synthesis took 0.018473 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002098 s
Synthesis took 0.060292 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.082 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.08600000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.08600000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002153 s
Synthesis took 0.017980 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001975 s
Synthesis took 0.054461 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.07800000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.07800000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.07800000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003089 s
Synthesis took 0.064233 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002067 s
Synthesis took 0.041302 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.10800000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.1 secs.
Sorting reachable states list...

Time for model construction: 0.1 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001891 s
Synthesis took 0.094969 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003323 s
Synthesis took 0.018088 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.116 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.058 secs.
Sorting reachable states list...

Time for model construction: 0.058 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001999 s
Synthesis took 0.015328 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001875 s
Synthesis took 0.015175 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.033 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.029 secs.
Sorting reachable states list...

Time for model construction: 0.030000000000000002 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001975 s
Synthesis took 0.036431 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001744 s
Synthesis took 0.014490 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.053000000000000005 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.031000000000000003 secs.
Sorting reachable states list...

Time for model construction: 0.031000000000000003 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001760 s
Synthesis took 0.010028 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001590 s
Synthesis took 0.009860 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.023000000000000003 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.060000000000000005 secs.
Sorting reachable states list...

Time for model construction: 0.061000000000000006 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001820 s
Synthesis took 0.014747 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001919 s
Synthesis took 0.016003 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.033 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.03900000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.03900000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.004114 s
Synthesis took 0.019517 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001876 s
Synthesis took 0.014685 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.053000000000000005 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.025 secs.
Sorting reachable states list...

Time for model construction: 0.026000000000000002 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001527 s
Synthesis took 0.015437 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001429 s
Synthesis took 0.010041 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.028 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.057 secs.
Sorting reachable states list...

Time for model construction: 0.057 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002015 s
Synthesis took 0.019314 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001894 s
Synthesis took 0.015780 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.038000000000000006 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.059000000000000004 secs.
Sorting reachable states list...

Time for model construction: 0.059000000000000004 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001620 s
Synthesis took 0.016279 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001451 s
Synthesis took 0.015109 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.034 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.037000000000000005 secs.
Sorting reachable states list...

Time for model construction: 0.037000000000000005 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001418 s
Synthesis took 0.025886 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001458 s
Synthesis took 0.011022 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.03900000000000001 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.046000000000000006 secs.
Sorting reachable states list...

Time for model construction: 0.046000000000000006 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001686 s
Synthesis took 0.015885 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001971 s
Synthesis took 0.047484 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.065 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.037000000000000005 secs.
Sorting reachable states list...

Time for model construction: 0.037000000000000005 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001971 s
Synthesis took 0.030625 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001760 s
Synthesis took 0.015917 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.048 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.127 secs.
Sorting reachable states list...

Time for model construction: 0.127 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001463 s
Synthesis took 0.011387 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001291 s
Synthesis took 0.009163 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.022000000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.023000000000000003 secs.
Sorting reachable states list...

Time for model construction: 0.023000000000000003 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001658 s
Synthesis took 0.020795 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001839 s
Synthesis took 0.014943 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.038000000000000006 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.067 secs.
Sorting reachable states list...

Time for model construction: 0.067 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001875 s
Synthesis took 0.039387 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001287 s
Synthesis took 0.009122 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.051000000000000004 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.027000000000000003 secs.
Sorting reachable states list...

Time for model construction: 0.028 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002008 s
Synthesis took 0.027798 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001769 s
Synthesis took 0.026400 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.056 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.059000000000000004 secs.
Sorting reachable states list...

Time for model construction: 0.059000000000000004 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002565 s
Synthesis took 0.011044 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001249 s
Synthesis took 0.009054 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.021 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.07 secs.
Sorting reachable states list...

Time for model construction: 0.07 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001537 s
Synthesis took 0.014328 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001444 s
Synthesis took 0.013632 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.030000000000000002 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.051000000000000004 secs.
Sorting reachable states list...

Time for model construction: 0.051000000000000004 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001323 s
Synthesis took 0.009194 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001561 s
Synthesis took 0.043018 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.054000000000000006 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 11 states
Reachable states exploration and model construction done in 0.043000000000000003 secs.
Sorting reachable states list...

Time for model construction: 0.043000000000000003 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001884 s
Synthesis took 0.012563 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001567 s
Synthesis took 0.010586 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
11
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
4 0 {0=1.0}
5 0 {0=1.0}
8 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
4 0 0 {0=1.0}
5 0 0 {0=1.0}
8 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 4 {0=1.0}
1 0 0 5 {0=1.0}
4 0 0 1 {0=1.0}
5 0 0 8 {0=1.0}
8 0 0 8 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 11 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.025 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.043000000000000003 secs.
Sorting reachable states list...

Time for model construction: 0.043000000000000003 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002335 s
Synthesis took 0.016169 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001901 s
Synthesis took 0.017683 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.037000000000000005 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.047 secs.
Sorting reachable states list...

Time for model construction: 0.047 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001835 s
Synthesis took 0.023145 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001518 s
Synthesis took 0.014851 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.04 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.056 secs.
Sorting reachable states list...

Time for model construction: 0.056 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001889 s
Synthesis took 0.015679 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002179 s
Synthesis took 0.016256 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.035 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.044000000000000004 secs.
Sorting reachable states list...

Time for model construction: 0.044000000000000004 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002116 s
Synthesis took 0.015856 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001787 s
Synthesis took 0.017076 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.035 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.032 secs.
Sorting reachable states list...

Time for model construction: 0.033 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.003100 s
Synthesis took 0.022209 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002838 s
Synthesis took 0.044774 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.07 seconds.

Result: true (property satisfied in the initial state)

Building model...

Computing reachable states... 17 states
Reachable states exploration and model construction done in 0.08800000000000001 secs.
Sorting reachable states list...

Time for model construction: 0.08800000000000001 seconds.
expr: [[R{"cost"}<=MAXCS [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"cost"}<=MAXCS [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.001883 s
Synthesis took 0.032742 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy

expr: [[R{"reliability"}<=MAXFR [ S ]]]

Warning: Ensure that game is controllable multichain. Not tested.
/////////////////   NEW (DIRECT) MODEL CHECKING TASK     /////////////////////
Property:
	[[R{"reliability"}<=MAXFR [ S ]]]

initial state: 0
operation: Strategy generation
Strategy construction took 0.002049 s
Synthesis took 0.019256 s
strategy: $SU.strat-v0.1
// Stochastic Memory Update Strategy
start strategy
States:
17
// Initial state
InitState:
0
// initial distribution
Init:
{0=1.0}
// next state function
// note: only P1 states
Next:
// first index: current state
// second index: current corner
6 0 {0=1.0}
7 0 {0=1.0}
12 0 {0=1.0}
// memory update function: player states
MemUpdStates:
// first index: current state
// second index: current corner
// third index: next move
0 0 0 {0=1.0}
1 0 0 {0=1.0}
6 0 0 {0=1.0}
7 0 0 {0=1.0}
12 0 0 {0=1.0}
// memory update function: moves
MemUpdMoves:
// first index: current state
// second index: current move
// third index: curent corner (at move)
// fourth index: next state
0 0 0 6 {0=1.0}
1 0 0 7 {0=1.0}
6 0 0 1 {0=1.0}
7 0 0 12 {0=1.0}
12 0 0 12 {0=1.0}
Info:

maximum C-iterations: 500
	relative termination threshold: 0.001000
	bounding box: 

endstrategy


Number of states satisfying <<con>> R{"cost"}<=MAXCS [ S ]&R{"reliability"}<=MAXFR [ S ]: 17 (all in model)

Property satisfied in 1 of 1 initial states.

Time for model checking: 0.054000000000000006 seconds.

Result: true (property satisfied in the initial state)
